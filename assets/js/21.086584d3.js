(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{219:function(n,t,a){"use strict";a.r(t);var i=a(4),e=Object(i.a)({},function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"shell-推送-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-推送-git","aria-hidden":"true"}},[n._v("#")]),n._v(" shell 推送 git")]),n._v(" "),a("h3",{attrs:{id:"简化版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简化版本","aria-hidden":"true"}},[n._v("#")]),n._v(" 简化版本")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/sh\n# @author xi_feng\n# @Email xi_feng@hunliji.com\n# @createBy 2020-03-12\n# Shell脚本提交git代码 简单,快速,高效\n#\n\necho \' >>>>>> start push <<<<<< \'\necho " ====== 当前分支 ====== "\nbranch=$(git symbolic-ref --short -q HEAD)\necho $branch\n\n# 判断参数1是否包含参数2\ncontains_str(){\n  contains_result=$(echo $1 | grep "${2}")\n  if [[ -n $contains_result  ]] ; then\n    return 1\n  else\n    return 0\n  fi\n}\n\n# 检查本地状态\necho ">>>>>> 执行 git add 之前,本地文件状态如下 <<<<<<"\ngit status\nstatusResult=$(git status)\nno_change="nothing to commit"\ncontains_str "$statusResult" "$no_change"\nif [[ $? == 1 ]]; then\n  echo "==== 当前没有新增或者修改的文件 ===="\n  exit\nfi\n\ngit add .\n\n# 判断是否有填写推送消息\n# 没有就自动填写一个\nmsg="$1"\nif [ ! -n "$msg" ]; then\n  author=$(git config user.name)\n  msg="git commit by $author"\nfi\necho $msg\n\ngit commit -m "${msg}"\n\ngit pull\ngit push\ngit status\n\necho echo "==== 推送成功 ===="\n')])])]),a("p",[n._v("###复杂版本")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/sh\n# @author xi_feng\n# @Email xi_feng@hunliji.com\n# @createBy 22020-03-12\n# Shell脚本提交git代码 简单,快速,高效\n#\nauthor = xi_feng\necho \' >>>>>> start push <<<<<< \'\necho " ====== 当前分支 ====== "\nbranch= git branch\necho $branch\n\n# 判断参数1是否包含参数2\ncontains_str(){\n    # echo " >>> $1 <<< "\n    # echo " <<< $2"\n\n    contains_result=$(echo $1 | grep "${2}")\n    if [[ -n $contains_result  ]] ; then\n          return 1\n      else\n          return 0\n    fi\n\n}\n\ngit_add(){\n    echo ">>>>>> 执行 git add 之前,本地文件状态如下 <<<<<<"\n    git status\n    statusResult=$(git status)\n    no_change="nothing to commit"\n\n    contains_str "$statusResult" "$no_change"\n\n    if [[ $? == 1 ]]; then\n        echo "=== 当前没有新增或者修改的文件 ==="\n        git_push\n        exit\n    fi\n\n    read -p "是否确定add？Y|N : " add_params\n    if [[ $add_params == "Y" || $add_params == "y" ]]; then\n            git add .\n    else\n        exit\n    fi\n}\n\ngit_commit(){\n     echo ">>>>>> 执行 git commit 之前,本地文件状态如下 <<<<<<"\n     git status\n     read -p "是否确定commit？Y|N : " commit_params\n     if [[ $commit_params == "Y" || $commit_params == "y" ]] ; then\n             read -p "请输入commit信息: " commit_msg\n             if [ -z $commit_msg  ] ; then\n                 git commit -m "git commit by $author" .\n             else\n                 git commit -m $commit_msg .\n             fi\n     elif [[ $commit_params == "N" || $commit_params == "n" ]] ; then\n          exit\n     else\n         exit\n     fi\n}\n\ngit_push(){\n    echo ">>>>>> 执行 git push 之前,本地文件状态如下 <<<<<<"\n    git status\n    current_branch=$(git symbolic-ref --short -q HEAD)\n    echo ">>>>>> 当前分支:$current_branch <<<<<<"\n    read -p "是否确定push？Y|N : " push_confirm\n    if [[ $push_confirm != "Y" &&  $push_confirm != "y" ]]; then\n        echo ">>>>>> end push <<<<<<"\n        exit\n    fi\n    read -p "请输入远程git地址别名,默认是origin: " origin_params\n    echo -e "\\n"\n    read -p "请输入远程分支名称,默认是当前分支: " branch_params\n    push_result="";\n    if [[ -z $origin_params && -z $branch_params ]]; then\n        echo ">>>>>> push origin $current_branch"\n        sleep 5\n        git push origin $current_branch\n\n    elif [[ -n $origin_params && -n $branch_params ]]; then\n        echo ">>>>>> push $origin_params $branch_params"\n        sleep 5\n        git push $origin_params $branch_params\n\n    elif [[ -z $origin_params && -n $branch_params  ]]; then\n        echo ">>>>>> push origin $branch_params"\n        sleep 5\n        git push origin $branch_params\n\n    elif [[ -n $origin_params && -z $branch_params  ]]; then\n        echo ">>>>>> push $origin_params $current_branch"\n        sleep 5\n        git push $origin_params $current_branch\n    else\n        echo ">>>>>> end push <<<<<<"\n    fi\n\n}\n\n\n\nread -p "默认push当前分支，Q代表quit,其他单词代表切换分支 : " branch\nif [[ $branch == "Y" || $branch == "y" || -z $branch ]] ; then\n        # echo  "你输入的是:  $branch "\n        statusResult=$(git status)\n        to_commit="Changes to be committed"\n        contains_str "$statusResult" "$to_commit"\n        if [[ $? != 1 ]]; then\n            git_add;\n        else\n            git add .\n            echo " ====== 本地没有需要add的文件，直接commit ====== "\n        fi\n        git_commit;\n        git_push;\n        exit;\n\nelif [[ $branch == "Q" || $branch == "q" ]] ; then\n        # echo "你输入的是： $branch ,代表退出当前操作！"\n        exit\nelse\n    git checkout $branch\n    echo -e "当前分支: \\n $(git branch) "\n    git_add;\n    git_commit;\n    git_push;\n    exit;\nfi\n')])])])])},[],!1,null,null,null);t.default=e.exports}}]);