(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{277:function(t,e,_){"use strict";_.r(e);var v=_(4),a=Object(v.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"输入-url-到页面渲染的整个流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#输入-url-到页面渲染的整个流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 输入 URL 到页面渲染的整个流程")]),t._v(" "),_("h2",{attrs:{id:"一、地址栏网址缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、地址栏网址缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、地址栏网址缓存")]),t._v(" "),_("p",[t._v("输入 url 后遇到的第一个缓存环节就是地址栏网址缓存。")]),t._v(" "),_("p",[t._v("但我们输入一个常用的网址时，经常会有这样的情况，我们只是输入了几个字母，浏览器就自动补全了该网址。如下图：我只输入 "),_("code",[t._v("j")]),t._v("，就自动给我补全了 "),_("code",[t._v("juejin.im")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/Fv5U4Hw49uqlYgiGmSDaPGNi1URt",alt:"img"}})]),t._v(" "),_("p",[t._v("当我们使用这个自动补全的网址时，你会发现请求的相关的静态资源也是从缓存中取得的。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/Fvu0X2n0nN0_cbZgrg5F5nBI-bt_",alt:"img"}})]),t._v(" "),_("p",[_("strong",[t._v("注意：不论什么时候，我们获取的主页面资源 "),_("code",[t._v("timeline")]),t._v(", 都应该是重新请求服务器而获得的，不可以使用本地浏览器的缓存。至于为什么？你看到静态资源文件名的 "),_("code",[t._v("hash")]),t._v(" 值你就应该清楚了。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/FouyMg_GjdzoIIggq3FLukoxo2vt",alt:"img"}})]),t._v(" "),_("blockquote",[_("p",[t._v("可以在 Chrome 的地址栏中输入 Chrome://cache 查看缓存的信息")])]),t._v(" "),_("h3",{attrs:{id:"转换非-ascii-的-unicode-字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#转换非-ascii-的-unicode-字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换非 ASCII 的 Unicode 字符")]),t._v(" "),_("p",[t._v("浏览器检查输入是否含有不是 "),_("code",[t._v("a-z，A-Z，0-9，-")]),t._v(" 或者 "),_("code",[t._v(".")]),t._v(" 的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码")]),t._v(" "),_("h2",{attrs:{id:"二、检查-hsts-预加载列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、检查-hsts-预加载列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、检查 HSTS 预加载列表")]),t._v(" "),_("blockquote",[_("p",[t._v("HSTS（ HTTP Strict Transport Security ）国际互联网工程组织 IETE 正在推行一种新的 Web 安全协议，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建连接。")])]),t._v(" "),_("p",[t._v("采用 HSTS 后：支持这个协议的浏览器，在输入 URL 后会检查自带的 HSTS 预加载列表（这个列表里包含了那些请求浏览器只使用 HTTPS 进行连接的域名），若网站在这个列表里，浏览器会使用 HTTPS 协议并且返回码为 "),_("code",[t._v("307")]),t._v("。而不支持 HSTS 的浏览器访问我们的网站，则不会产生跳转，从而提高了兼容性。这个机制对于不支持 HTTPS 的搜索引擎来说是非常友好的！")]),t._v(" "),_("p",[t._v("如掘金输入 "),_("code",[t._v("http://juejin.im/timeline")]),t._v(" 会跳转到 "),_("code",[t._v("https://juejin.im/timeline")]),t._v(":")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/FhueBdqT079OreyCX8H3OjejWmbT",alt:"img"}})]),t._v(" "),_("p",[t._v("查看 HSTS 预加载列表是否存在你想访问的域名你可以在输入 "),_("code",[t._v("qqbrowser://net-internals/#hsts")]),t._v("，若存在会返回信息：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/FgWEr2qd29NIu3mW0K32x2N7GPbL",alt:"img"}})]),t._v(" "),_("h2",{attrs:{id:"三、dns-缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、dns-缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、DNS 缓存")]),t._v(" "),_("p",[t._v("但你输入 "),_("code",[t._v("juejin.im")]),t._v(" 按下回车后，就开始对 "),_("code",[t._v("juejin.im")]),t._v(" 进行域名解析。域名解析最少涉及了三个地方的缓存：")]),t._v(" "),_("ol",[_("li",[t._v("浏览器的 DNS 缓存")]),t._v(" "),_("li",[t._v("操作系统中的 DNS 缓存")]),t._v(" "),_("li",[t._v("操作系统的 hosts 文件（可手动写入的缓存）")])]),t._v(" "),_("h3",{attrs:{id:"域名解析的具体过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#域名解析的具体过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 域名解析的具体过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/Ft12tr80m6mhhJ60Ok6HZR8ftxM4",alt:"img"}})]),t._v(" "),_("ol",[_("li",[t._v("浏览器搜索自己的 DNS 缓存（浏览器维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；")]),t._v(" "),_("li",[t._v("搜索操作系统中的 DNS 缓存；如果没有命中，进入下一步；")]),t._v(" "),_("li",[t._v("搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("操作系统将域名发送至 LDNS （本地区域名服务器），LDNS 查询自己的 DNS 缓存（一般命中率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求：")]),t._v(" "),_("li",[t._v("LDNS 向 Root Name Server（根域名服务器，如 com、net、im 等的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 im 域的顶级域名服务器的地址；")]),t._v(" "),_("li",[t._v("LDNS 向 im 域的顶级域名服务器发起请求，返回 juejin.im 域名服务器地址；")]),t._v(" "),_("li",[t._v("LDNS 向 juejin.im 域名服务器发起请求，得到 juejin.im 的 IP 地址；")]),t._v(" "),_("li",[t._v("LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来。")])])]),t._v(" "),_("h3",{attrs:{id:"dns-prefetch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns-prefetch","aria-hidden":"true"}},[t._v("#")]),t._v(" DNS Prefetch")]),t._v(" "),_("p",[t._v("即 DNS 预获取，是前端优化的一部分。一般来说，在前端优化中与 DNS 有关的有两点：")]),t._v(" "),_("ol",[_("li",[t._v("减少 DNS 的请求次数")]),t._v(" "),_("li",[t._v("进行 DNS 预获取")])]),t._v(" "),_("p",[t._v("典型的一次 DNS 解析需要耗费 20-120 毫秒，减少 DNS 解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。")]),t._v(" "),_("blockquote",[_("p",[t._v("你可以通过 "),_("code",[t._v("chrome://net-internals/#dns")]),t._v(" 查找目前系统中的 DNS 缓存和 Chrome 中使用的情况。")])]),t._v(" "),_("h3",{attrs:{id:"提个问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提个问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 提个问题")]),t._v(" "),_("p",[t._v("问：浏览器 DNS 缓存的时间一般不会太长，一分钟左右。为什么缓存不设置较长时间呢？")]),t._v(" "),_("p",[t._v("答：虽然 DNS 缓存可以提高获取 DNS 的速度，但缓存时间过长也会影响 DNS 在 IP 变更时不能及时解析到最新的 IP。")]),t._v(" "),_("h2",{attrs:{id:"四、arp（地址解析协议）缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、arp（地址解析协议）缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、ARP（地址解析协议）缓存")]),t._v(" "),_("blockquote",[_("p",[t._v("ARP 是一种用以解释地址的协议，根据通信方的 IP 地址就可以查出对应方的 MAC 地址。")])]),t._v(" "),_("p",[t._v("ARP 缓存是个用来储存 IP 地址和 MAC 地址的缓冲区，其本质就是一个 IP 地址与 MAC 地址的对应表，表中每一个条目分别记录了其他主机的 IP 地址和对应的 MAC 地址。")]),t._v(" "),_("p",[_("strong",[t._v("当地址解析协议被询问一个已知 IP 地址节点的 MAC 地址时，先在 AR 缓存中查看，若存在，就直接返回与之对应的 MAC 地址；若不存在，才发送 ARP 请求查询。")])]),t._v(" "),_("p",[t._v("具体的 ARP 请求查询感兴趣的同学可以自行研究。")]),t._v(" "),_("h2",{attrs:{id:"五、tcp-三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、tcp-三次握手","aria-hidden":"true"}},[t._v("#")]),t._v(" 五、TCP 三次握手")]),t._v(" "),_("p",[_("strong",[t._v("在客户端发送数据之前会发起 TCP 三次握手用以同步客户端和服务端的序列号和确认号，并交换 TCP 窗口大小信息")]),t._v("。\n"),_("a",{attrs:{href:"https://camo.githubusercontent.com/7e7a1a0c162ab52d3a23b8ccf7e0f8bd25864408/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d646163616137613937346265613038313f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430",target:"_blank",rel:"noopener noreferrer"}},[_("img",{attrs:{src:"https://camo.githubusercontent.com/7e7a1a0c162ab52d3a23b8ccf7e0f8bd25864408/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d646163616137613937346265613038313f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430",alt:"img"}}),_("OutboundLink")],1)]),t._v(" "),_("h4",{attrs:{id:"_1-tcp-三次握手的过程如下："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-三次握手的过程如下：","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.TCP 三次握手的过程如下：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("客户端发送一个带 SYN=1，Seq=X 的数据包到服务器端口")]),t._v("（第一次握手，由浏览器发起，告诉服务器我要发送请求了）")]),t._v(" "),_("li",[_("strong",[t._v("服务器发回一个带 SYN=1， ACK=X+1， Seq=Y 的响应包以示传达确认信息")]),t._v("（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）")]),t._v(" "),_("li",[_("strong",[t._v("客户端再回传一个带 ACK=Y+1， Seq=Z 的数据包，代表“握手结束”")]),t._v("（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）")])]),t._v(" "),_("h4",{attrs:{id:"_2-为啥需要三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-为啥需要三次握手","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.为啥需要三次握手")]),t._v(" "),_("p",[t._v("谢希仁著《计算机网络》中讲“三次握手”的目的是“"),_("strong",[t._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误")]),t._v("”。")]),t._v(" "),_("h2",{attrs:{id:"六、tcp-发送缓冲区-接收缓冲区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、tcp-发送缓冲区-接收缓冲区","aria-hidden":"true"}},[t._v("#")]),t._v(" 六、TCP 发送缓冲区 & 接收缓冲区")]),t._v(" "),_("p",[t._v("建立 TCP 连接这一步也涉及到缓存 —— 用来临时存放双方通信的数据，"),_("strong",[t._v("保证通信数据不会丢包")]),t._v("。")]),t._v(" "),_("p",[t._v("每个 TCP 连接在内核中都有一个发送缓冲区和接收缓冲区，TCP 的全双工的工作模式以及 TCP 的流量(拥塞)控制便是依赖于这两个独立的 buffer 以及 buffer 的填充状态。")]),t._v(" "),_("h3",{attrs:{id:"发送缓冲区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发送缓冲区","aria-hidden":"true"}},[t._v("#")]),t._v(" 发送缓冲区")]),t._v(" "),_("blockquote",[_("p",[t._v("发送缓冲区存放的是 "),_("code",[t._v("send()")]),t._v(" 方法从应用缓冲区拷贝过来的数据。")])]),t._v(" "),_("p",[t._v("内核基本上是按照 MSS（Maximum Segment Size，最大报文段长度） 从缓冲区中取数据发送出去，当缓冲区中数据小于 MSS，则将剩余数据全部发送出去。TCP 的发送缓冲区必须为已发送的数据保留一个副本，直到它被对端确认为止，才能从缓冲区中删掉已确认的数据。")]),t._v(" "),_("h3",{attrs:{id:"接收缓冲区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接收缓冲区","aria-hidden":"true"}},[t._v("#")]),t._v(" 接收缓冲区")]),t._v(" "),_("blockquote",[_("p",[t._v("接收缓冲区被 TCP 用来保存接收到的数据，直到应用程序来读取。")])]),t._v(" "),_("p",[t._v("接收缓冲区把数据缓存入内核，等待 "),_("code",[t._v("recv()")]),t._v(" 方法读取， "),_("code",[t._v("recv()")]),t._v(" 方法所做的工作，就是把内核缓冲区中的数据拷贝到应用层用户的 "),_("code",[t._v("buffer")]),t._v(" 里面，拷贝后就删掉已确认的数据。")]),t._v(" "),_("h3",{attrs:{id:"流控制-flow-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流控制-flow-control","aria-hidden":"true"}},[t._v("#")]),t._v(" 流控制(Flow Control)")]),t._v(" "),_("blockquote",[_("p",[t._v("A mechanism to prevent a TCP sender from overwhelming a TCP receiver.\nTCP 流控制主要用于匹配发送端和接收端的速度，即根据接收端当前的接收能力来调整发送端的发送速度。")])]),t._v(" "),_("p",[t._v("由于发送速度可能大于接收速度，接收端的应用程序未能及时从接收缓冲区读取数据，接收缓冲区不够大不能缓存所有接收到的报文等原因，TCP 接收端的接收缓冲区很快就会被塞满；从而导致不能接收后续的数据，发送端此后发送数据是无效的，因此需要流控制。")]),t._v(" "),_("p",[t._v("TCP 的缓存就讲到这里，感兴趣的可以自己翻阅资料。")]),t._v(" "),_("h2",{attrs:{id:"七、http-请求缓存（-cdn-节点缓存、代理服务器缓存、浏览器缓存、后端动态计算结果缓存等-）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、http-请求缓存（-cdn-节点缓存、代理服务器缓存、浏览器缓存、后端动态计算结果缓存等-）","aria-hidden":"true"}},[t._v("#")]),t._v(" 七、HTTP 请求缓存（ CDN 节点缓存、代理服务器缓存、浏览器缓存、后端动态计算结果缓存等 ）")]),t._v(" "),_("p",[t._v("在建立了 TCP 连接之后，就开始 HTTP 请求了；"),_("strong",[t._v("而 HTTP 缓存是优化性能不可忽视的一部分")]),t._v("，这一部分我会着重讲解。")]),t._v(" "),_("p",[t._v("再讲具体过程之前，我再讲一遍强缓存和协商缓存。")]),t._v(" "),_("h4",{attrs:{id:"强缓存-cache-control-和-expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存-cache-control-和-expires","aria-hidden":"true"}},[t._v("#")]),t._v(" 强缓存 ( Cache-Control 和 Expires )")]),t._v(" "),_("p",[t._v("强缓存主要是采用"),_("strong",[t._v("响应头")]),t._v("中的 "),_("code",[t._v("Cache-Control")]),t._v(" 和 "),_("code",[t._v("Expires")]),t._v(" 两个字段进行控制的。")]),t._v(" "),_("blockquote",[_("p",[t._v("其中 "),_("code",[t._v("Expires")]),t._v(" 是 "),_("code",[t._v("HTTP1.0")]),t._v(" 中定义的，"),_("strong",[t._v("它指定了一个绝对的过期时期")]),t._v("。而 "),_("code",[t._v("Cache-Control")]),t._v(" 是 "),_("code",[t._v("HTTP1.1")]),t._v(" 时出现的缓存控制字段。 由于 "),_("code",[t._v("Expires")]),t._v(" 是 "),_("code",[t._v("HTTP1.0")]),t._v(" 时代的产物，因此设计之初就存在着一些缺陷，如果本地时间和服务器时间相差太大，就会导致缓存错乱。")])]),t._v(" "),_("p",[_("strong",[t._v("这两个字段同时使用的时候 "),_("code",[t._v("Cache-Control")]),t._v(" 的优先级会更高一点。")])]),t._v(" "),_("p",[t._v("这两个字段的效果是类似的，客户端都会通过对比本地时间和服务器返回的生存时间来检测缓存是否可用。如果缓存没有超出它的生存时间，客户端就会直接采用本地的缓存。如果生存日期已经过了，这个缓存也就宣告失效。"),_("strong",[t._v("接着客户端将再次与服务器进行通信来验证这个缓存是否需要更新")]),t._v("。")]),t._v(" "),_("p",[t._v("在"),_("strong",[t._v("请求头")]),t._v("中使用 "),_("code",[t._v("Cache-Control")]),t._v(" 时，它可选的值有：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("指令")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-cache")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("使用代理服务器的缓存之前提交原始服务器验证，验证通过才能使用")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-store")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("在客户端或是代理服务器都不缓存请求或响应的任何内容")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("max-age=[秒]")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("告知服务器客户端可接受资源的存在最大时间")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("max-stale(=[秒])")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("可接受（代理服务器缓存的）过期资源，参数可省略")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("min-fresh=[秒]")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("可接受（代理服务器缓存的）资源更新时间小于指定时间")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-transform")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("代理服务器不可以更改媒体类型")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("only-if-cached")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("客户端只接受已缓存的响应，若缓存不命中，则返回 504 错误")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("cache-extension")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("自定义扩展值，若服务器不知别该指令，就直接忽略")])])])]),t._v(" "),_("p",[t._v("在"),_("strong",[t._v("响应头")]),t._v("中使用 "),_("code",[t._v("Cache-Control")]),t._v(" 时，它可选的值有：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("指令")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("public")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("表明该资源可以给多个用户使用")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("private(= name)")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("该资源是私有资源，指定的用户可以使用的缓存")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-cache")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("强制每次请求直接发送给源服务器，而不经过本地缓存版本的校验。")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-store")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("在客户端或是代理服务器都不缓存请求或响应的任何内容")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("no-transform")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("代理服务器不可以更改媒体类型")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("must-revalidate")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("可缓存但必须再向源服务器进行请求确认")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("proxy-revalidate")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("要求缓存服务器返回缓存的时候向源服务器进行请求确认")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("max-age=[秒]")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("告知客户端该资源在规定时间内是新鲜的，无需向服务器确认")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("s-maxage=[秒]")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("告知缓存服务该资源在规定时间内是新鲜的，无需向服务器确认")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("cache-extension")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("自定义扩展值，若服务器不识别该指令，就直接忽略")])])])]),t._v(" "),_("p",[_("strong",[t._v("可缓存性")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("public")]),t._v("：响应可以被任何对象（客户端、代理服务器等）缓存")]),t._v(" "),_("li",[_("code",[t._v("private")]),t._v("：只能被单个用户缓存，不能作为共享缓存")]),t._v(" "),_("li",[_("code",[t._v("no-cache")]),t._v("：使用缓存副本之前，需要将请求提交给原始服务器进行验证，验证通过才可以使用")]),t._v(" "),_("li",[_("code",[t._v("only-if-cached")]),t._v("：客户端只接受已缓存的响应，并且不向原始服务器检查是否有更新的拷贝")])]),t._v(" "),_("p",[_("strong",[t._v("到期")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("max-age=")]),t._v("：缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与 "),_("code",[t._v("Expires")]),t._v(" 相反，时间是相对于请求的时间")]),t._v(" "),_("li",[_("code",[t._v("s-maxage=")]),t._v("：覆盖 "),_("code",[t._v("max-age")]),t._v(" 或者 "),_("code",[t._v("Expires")]),t._v(" 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略")]),t._v(" "),_("li",[_("code",[t._v("max-stale[=]")]),t._v("：表明客户端愿意接收一个已经过期的资源。可选的设置一个时间(单位秒)，表示响应不能超过的过时时间")]),t._v(" "),_("li",[_("code",[t._v("min-fresh=")]),t._v("：表示客户端希望在指定的时间内获取最新的响应")])]),t._v(" "),_("p",[_("strong",[t._v("重新验证和重新加载")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("must-revalidate")]),t._v("：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。")]),t._v(" "),_("li",[_("code",[t._v("proxy-revalidate")]),t._v("：与 "),_("code",[t._v("must-revalidate")]),t._v(" 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略")])]),t._v(" "),_("p",[_("strong",[t._v("其他")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("no-store")]),t._v("：彻底得禁用缓冲，本地和代理服务器都不缓冲，每次都从服务器获取")]),t._v(" "),_("li",[_("code",[t._v("no-transform")]),t._v("：不得对资源进行转换或转变。 "),_("code",[t._v("Content-Encoding")]),t._v(", "),_("code",[t._v("Content-Range")]),t._v(", "),_("code",[t._v("Content-Type")]),t._v(" 等 "),_("code",[t._v("HTTP")]),t._v(" 头不能由代理修改。")])]),t._v(" "),_("h4",{attrs:{id:"协商缓存-last-modified-和-etag"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存-last-modified-和-etag","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存 ( Last-Modified 和 Etag )")]),t._v(" "),_("blockquote",[_("p",[t._v("协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求还是从本地获取缓存的资源。如果服务端提示缓存资源未改动（ Not Modified ），资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 "),_("code",[t._v("304")]),t._v("。")])]),t._v(" "),_("p",[t._v("Last-Modified 和 If-Modified-Since")]),t._v(" "),_("blockquote",[_("p",[t._v("基于资源在服务器修改时间而验证缓存的过期机制")])]),t._v(" "),_("p",[t._v("当客户端再次请求该资源的时候，会在其"),_("strong",[t._v("请求头")]),t._v("上附带上 "),_("code",[t._v("If-Modified-Since")]),t._v(" 字段（值就是第一次获取请求资源时响应头中返回的 "),_("code",[t._v("Last-Modified")]),t._v(" 值）。如果修改时间未改变则表明资源未过期，命中缓存，服务器就直接返回 "),_("code",[t._v("304")]),t._v(" 状态码，客户端直接使用本地的资源。否则，服务器重新发送响应资源，从而保证资源的有效性。")]),t._v(" "),_("p",[_("strong",[t._v("Etag 和 If-None-Match")])]),t._v(" "),_("blockquote",[_("p",[t._v("基于资源校验码（一般为 md5 值）而验证缓存的过期机制")])]),t._v(" "),_("p",[t._v("当客户端再次请求该资源的时候，会在其"),_("strong",[t._v("请求头")]),t._v("上附带上 "),_("code",[t._v("If-None-Match")]),t._v(" 字段（值就是第一次获取请求资源时响应头中返回的 "),_("code",[t._v("Etag")]),t._v(" 值），其值与服务器端资源文件的验证码进行对比，如果匹配成功直接返回 "),_("code",[t._v("304")]),t._v(" 状态码，从浏览器本地缓存取资源文件。如果不匹配，服务器会把新的验证码放在请求头的 "),_("code",[t._v("Etag")]),t._v(" 字段中，并且以 "),_("code",[t._v("200")]),t._v(" 状态码返回资源。")]),t._v(" "),_("blockquote",[_("p",[t._v("需要注意的是当"),_("strong",[t._v("响应头")]),t._v("中同时存在 "),_("code",[t._v("Etag")]),t._v(" 和 "),_("code",[t._v("Last-Modified")]),t._v(" 的时候，会先对 "),_("code",[t._v("Etag")]),t._v(" 进行比对，随后才是 "),_("code",[t._v("Last-Modified")]),t._v("。")])]),t._v(" "),_("p",[_("strong",[t._v("Etag 的问题")]),t._v("\n相同的资源，在两台服务器产生的 "),_("code",[t._v("Etag")]),t._v(" 是不是相同的，所以对于使用服务器集群来处理请求的网站来说， "),_("code",[t._v("Etag")]),t._v(" 的匹配概率会大幅降低。所在在这种情况下，使用 "),_("code",[t._v("Etag")]),t._v(" 来处理缓存，反而会有更大的开销。")]),t._v(" "),_("h4",{attrs:{id:"静态资源和动态资源的请求过程解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态资源和动态资源的请求过程解析","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态资源和动态资源的请求过程解析")]),t._v(" "),_("p",[_("strong",[t._v("静态资源")]),t._v(" "),_("strong",[t._v("第一次")]),t._v("请求肯定是从服务器请求过来的资源，这个没有什么疑问，我们先看看第一次请求的"),_("strong",[t._v("响应头")]),t._v("的内容：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/Fg6tQ-E7byOTgMKK85cYtyE9Eriu",alt:"img"}})]),t._v(" "),_("p",[t._v("我们发现第一次的响应头中包含可强缓存的相关字段 "),_("code",[t._v("cache-control")]),t._v(" ,同时也包含了协商缓存的相关字段 "),_("code",[t._v("etag")]),t._v(" 和 "),_("code",[t._v("last-modified")]),t._v(";")]),t._v(" "),_("p",[t._v("当强缓存和协商缓存字段同时存在时会进行以下步骤来请求资源：")]),t._v(" "),_("p",[t._v("1.强缓存和协商缓存同时存在，如果强缓存还在有效期内则直接使用缓存；如果强缓存不在有效期，协商缓存生效。\n即：强缓存优先级 > 协商缓存优先级")]),t._v(" "),_("p",[t._v("2.强缓存的 "),_("code",[t._v("expires")]),t._v(" 和 "),_("code",[t._v("cache-control")]),t._v(" 同时存在时， "),_("code",[t._v("cache-control")]),t._v(" 会覆盖 "),_("code",[t._v("expires")]),t._v(" 的效果， "),_("code",[t._v("expires")]),t._v(" 无论有没有过期，都无效。\n即： "),_("code",[t._v("cache-control")]),t._v(" 优先级 > "),_("code",[t._v("expires")]),t._v(" 优先级。")]),t._v(" "),_("p",[t._v("3.协商缓存的 "),_("code",[t._v("Etag")]),t._v(" 和 "),_("code",[t._v("Last-Modified")]),t._v(" 同时存在时， "),_("code",[t._v("Etag")]),t._v(" 会覆盖 "),_("code",[t._v("Last-Modified")]),t._v("的效果。\n即： "),_("code",[t._v("ETag")]),t._v(" 优先级 > "),_("code",[t._v("Last-Modified")]),t._v(" 优先级。")]),t._v(" "),_("p",[_("strong",[t._v("第二次")]),t._v("请求该资源的时候，就直接是从缓存中读取的：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qnm.hunliji.com/Fok8gUcJHY0Ifej98D0C5Onpsyt4",alt:"img"}})]),t._v(" "),_("blockquote",[_("p",[t._v("其实我们第一次获取的资源极有可能是从 CDN 节点的缓存中获取的，也很有可能是从中间代理服务器（nginx，node 等）的缓存中读取的；其中的好处不言而喻。")])]),t._v(" "),_("p",[_("strong",[t._v("动态资源")])]),t._v(" "),_("p",[t._v("由于动态资源的返回结果不一致，所以这个我们肯定不会在浏览器（中间代理服务器）缓存动态的结果。")]),t._v(" "),_("p",[t._v("不过这里我们可以在后端缓存一些重复率比较高的相关的计算结果。")]),t._v(" "),_("blockquote",[_("p",[t._v("如：这里有 60 只股票，用户可以选择其中几只股票作为自己的股票投资池。用户选择完股票后提交，会通过相关的算法计算其预期收益效果等指标。我们知道每次计算的时间可能会比较久，所以在这步我们可以在后端将可能的组合结果先计算好缓存起来，当我们请求的时候就后端就可以直接返回已经计算好的结果给前端。至于计算结果的缓存时间也就完全由服务器控制了。")])]),t._v(" "),_("p",[t._v("关于动态资源一般前端是不做缓存的。")]),t._v(" "),_("blockquote",[_("p",[t._v("后端缓存主要通过保留数据库连接，存储处理结果等方式缩短处理时间，尽快响应客户端请求。")])]),t._v(" "),_("h2",{attrs:{id:"八、浏览器解析渲染页面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、浏览器解析渲染页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 八、浏览器解析渲染页面")]),t._v(" "),_("p",[t._v("浏览器拿到响应文本 HTML 后，接下来介绍下浏览器渲染机制")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://camo.githubusercontent.com/4ec00b04ef4678b0342909c9316cd545c458d8e5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d653035386462386539306434303736302e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430",alt:"img"}})]),t._v(" "),_("p",[t._v("浏览器解析渲染页面分为一下五个步骤：")]),t._v(" "),_("ul",[_("li",[t._v("根据 HTML 解析出 DOM 树")]),t._v(" "),_("li",[t._v("根据 CSS 解析生成 CSS 规则树")]),t._v(" "),_("li",[t._v("结合 DOM 树和 CSS 规则树，生成渲染树")]),t._v(" "),_("li",[t._v("根据渲染树计算每一个节点的信息")]),t._v(" "),_("li",[t._v("根据计算好的信息绘制页面")])]),t._v(" "),_("h3",{attrs:{id:"_1-根据-html-解析-dom-树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-根据-html-解析-dom-树","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.根据 HTML 解析 DOM 树")]),t._v(" "),_("ul",[_("li",[t._v("根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。")]),t._v(" "),_("li",[t._v("在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。")])]),t._v(" "),_("h3",{attrs:{id:"_2-根据-css-解析生成-css-规则树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-根据-css-解析生成-css-规则树","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.根据 CSS 解析生成 CSS 规则树")]),t._v(" "),_("ul",[_("li",[t._v("解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。")]),t._v(" "),_("li",[t._v("浏览器在 CSS 规则树生成之前不会进行渲染。")])]),t._v(" "),_("h3",{attrs:{id:"_3-结合-dom-树和-css-规则树，生成渲染树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-结合-dom-树和-css-规则树，生成渲染树","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.结合 DOM 树和 CSS 规则树，生成渲染树")]),t._v(" "),_("ul",[_("li",[t._v("DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。")]),t._v(" "),_("li",[t._v("精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。")])]),t._v(" "),_("h3",{attrs:{id:"_4-根据渲染树计算每一个节点的信息（布局）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-根据渲染树计算每一个节点的信息（布局）","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.根据渲染树计算每一个节点的信息（布局）")]),t._v(" "),_("ul",[_("li",[t._v("布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸")]),t._v(" "),_("li",[t._v("回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。")])]),t._v(" "),_("h3",{attrs:{id:"_5-根据计算好的信息绘制页面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-根据计算好的信息绘制页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.根据计算好的信息绘制页面")]),t._v(" "),_("ul",[_("li",[t._v("绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。")]),t._v(" "),_("li",[t._v("重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。")]),t._v(" "),_("li",[t._v("回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。")])]),t._v(" "),_("h2",{attrs:{id:"九、断开连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#九、断开连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 九、断开连接")]),t._v(" "),_("p",[_("strong",[t._v("当数据传送完毕，需要断开 tcp 连接，此时发起 tcp 四次挥手")]),t._v("。\n"),_("a",{attrs:{href:"https://camo.githubusercontent.com/77905edb70a6b9052ec023febffdfa3a22886e47/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d353631323264353831316665663062312e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430",target:"_blank",rel:"noopener noreferrer"}},[_("img",{attrs:{src:"https://camo.githubusercontent.com/77905edb70a6b9052ec023febffdfa3a22886e47/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d353631323264353831316665663062312e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430",alt:"img"}}),_("OutboundLink")],1)]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("发起方向被动方发送报文，Fin、Ack、Seq，表示已经没有数据传输了。并进入 FIN_WAIT_1 状态")]),t._v("。(第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧)")]),t._v(" "),_("li",[_("strong",[t._v("被动方发送报文，Ack、Seq，表示同意关闭请求。此时主机发起方进入 FIN_WAIT_2 状态")]),t._v("。(第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧)")]),t._v(" "),_("li",[_("strong",[t._v("被动方向发起方发送报文段，Fin、Ack、Seq，请求关闭连接。并进入 LAST_ACK 状态")]),t._v("。(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)")]),t._v(" "),_("li",[_("strong",[t._v("发起方向被动方发送报文段，Ack、Seq。然后进入等待 TIME_WAIT 状态。被动方收到发起方的报文段以后关闭连接。发起方等待一定时间未收到回复，则正常关闭")]),t._v("。(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)")])])])},[],!1,null,null,null);e.default=a.exports}}]);