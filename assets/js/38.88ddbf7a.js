(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{236:function(t,a,e){"use strict";e.r(a);var s=e(4),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"浏览器基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器基础")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%BB%E8%A6%81%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[t._v("浏览器的主要组成部分是什么？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90css%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%9F"}},[t._v("浏览器如何解析 css 选择器？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#dom-tree%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%9A%84%EF%BC%9F"}},[t._v("DOM Tree 是如何构建的？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"}},[t._v("浏览器重绘与重排的区别？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98%EF%BC%9F"}},[t._v("如何触发重排和重绘？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E9%87%8D%E7%BB%98%E6%88%96%E8%80%85%E9%87%8D%E6%8E%92%EF%BC%9F"}},[t._v("如何避免重绘或者重排？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%EF%BC%9F"}},[t._v("前端如何实现即时通讯？")])])]),t._v(" "),e("h2",{attrs:{id:"浏览器的主要组成部分是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的主要组成部分是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的主要组成部分是什么？")]),t._v(" "),e("p",[t._v("Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("浏览器进程")]),t._v("：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),t._v(" "),e("li",[e("code",[t._v("渲染进程")]),t._v("：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),t._v(" "),e("li",[e("code",[t._v("GPU 进程")]),t._v("：其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),t._v(" "),e("li",[e("code",[t._v("网络进程")]),t._v("：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),t._v(" "),e("li",[e("code",[t._v("插件进程")]),t._v("：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/layers.png#align=left&display=inline&height=339&originHeight=339&originWidth=500&status=uploading&width=500",alt:""}})]),t._v(" "),e("blockquote",[e("p",[t._v("图：浏览器的主要组件。")])]),t._v(" "),e("p",[t._v("值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。")]),t._v(" "),e("h2",{attrs:{id:"浏览器如何解析-css-选择器？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何解析-css-选择器？","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器如何解析 css 选择器？")]),t._v(" "),e("p",[t._v("浏览器会『从右往左』解析 CSS 选择器。")]),t._v(" "),e("p",[t._v("我们知道 DOM Tree 与 Style Rules 合成为 Render Tree，实际上是需要将"),e("em",[t._v("Style Rules")]),t._v("附着到 DOM Tree 上，因此需要根据选择器提供的信息对 DOM Tree 进行遍历，才能将样式附着到对应的 DOM 元素上。")]),t._v(" "),e("p",[t._v("以下这段 css 为例")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".mod-nav h3 span")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 16px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("我们对应的 DOM Tree 如下")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/4fe91032bd748f2509e0f0da3e56dcc1.png",alt:"2019-06-22-06-58-56"}})]),t._v(" "),e("p",[t._v("若从左向右的匹配，过程是：")]),t._v(" "),e("ol",[e("li",[t._v("从 .mod-nav 开始，遍历子节点 header 和子节点 div")]),t._v(" "),e("li",[t._v("然后各自向子节点遍历。在右侧 div 的分支中")]),t._v(" "),e("li",[t._v("最后遍历到叶子节点 a ，发现不符合规则，需要回溯到 ul 节点，再遍历下一个 li-a，一颗 DOM 树的节点动不动上千，这种效率很低。")])]),t._v(" "),e("p",[t._v("如果从右至左的匹配：")]),t._v(" "),e("ol",[e("li",[t._v("先找到所有的最右节点 span，对于每一个 span，向上寻找节点 h3")]),t._v(" "),e("li",[t._v("由 h3 再向上寻找 class=mod-nav 的节点")]),t._v(" "),e("li",[t._v("最后找到根元素 html 则结束这个分支的遍历。")])]),t._v(" "),e("p",[t._v("后者匹配性能更好，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。")]),t._v(" "),e("h2",{attrs:{id:"dom-tree-是如何构建的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-tree-是如何构建的？","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM Tree 是如何构建的？")]),t._v(" "),e("ol",[e("li",[t._v("转码: 浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串")]),t._v(" "),e("li",[t._v("生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens")]),t._v(" "),e("li",[t._v("构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope")]),t._v(" "),e("li",[t._v("生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM Tree")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/6ccc9594a0dc0a616804780992d4298d.png",alt:"2019-06-22-11-48-00"}})]),t._v(" "),e("h2",{attrs:{id:"浏览器重绘与重排的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器重绘与重排的区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器重绘与重排的区别？")]),t._v(" "),e("ul",[e("li",[t._v("重排: 部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算，表现为重新生成布局，重新排列元素")]),t._v(" "),e("li",[t._v("重绘: 由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新，表现为某些元素的外观被改变")])]),t._v(" "),e("p",[t._v("单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分")]),t._v(" "),e("p",[t._v("重排和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。")]),t._v(" "),e("p",[t._v("『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。")]),t._v(" "),e("h2",{attrs:{id:"如何触发重排和重绘？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何触发重排和重绘？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何触发重排和重绘？")]),t._v(" "),e("p",[t._v("任何改变用来构建渲染树的信息都会导致一次重排或重绘：")]),t._v(" "),e("ul",[e("li",[t._v("添加、删除、更新 DOM 节点")]),t._v(" "),e("li",[t._v("通过 display: none 隐藏一个 DOM 节点-触发重排和重绘")]),t._v(" "),e("li",[t._v("通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化")]),t._v(" "),e("li",[t._v("移动或者给页面中的 DOM 节点添加动画")]),t._v(" "),e("li",[t._v("添加一个样式表，调整样式属性")]),t._v(" "),e("li",[t._v("用户行为，例如调整窗口大小，改变字号，或者滚动。")])]),t._v(" "),e("h2",{attrs:{id:"如何避免重绘或者重排？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何避免重绘或者重排？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何避免重绘或者重排？")]),t._v(" "),e("h3",{attrs:{id:"集中改变样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集中改变样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 集中改变样式")]),t._v(" "),e("p",[t._v("我们往往通过改变 class 的方式来集中改变样式")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否是黑色系样式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" theme "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" isDark "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dark'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'light'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据判断来设置不同的class")]),t._v("\nele"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'className'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" theme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"使用-documentfragment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-documentfragment","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 DocumentFragment")]),t._v(" "),e("p",[t._v("我们可以通过 createDocumentFragment 创建一个游离于 DOM 树之外的节点，然后在此节点上批量操作，最后插入 DOM 树中，因此只触发一次重排")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fragment "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDocumentFragment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n  fragment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndocument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"提升为合成层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提升为合成层","aria-hidden":"true"}},[t._v("#")]),t._v(" 提升为合成层")]),t._v(" "),e("p",[t._v("将元素提升为合成层有以下优点：")]),t._v(" "),e("ul",[e("li",[t._v("合成层的位图，会交由 GPU 合成，比 CPU 处理要快")]),t._v(" "),e("li",[t._v("当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层")]),t._v(" "),e("li",[t._v("对于 transform 和 opacity 效果，不会触发 layout 和 paint")])]),t._v(" "),e("p",[t._v("提升合成层的最好方式是使用 CSS 的 will-change 属性：")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#target")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("will-change")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" transform"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("关于合成层的详解请移步"),e("a",{attrs:{href:"https://fed.taobao.org/blog/2016/04/26/performance-composite/",target:"_blank",rel:"noopener noreferrer"}},[t._v("无线性能优化：Composite"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"前端如何实现即时通讯？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端如何实现即时通讯？","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端如何实现即时通讯？")]),t._v(" "),e("h3",{attrs:{id:"短轮询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#短轮询","aria-hidden":"true"}},[t._v("#")]),t._v(" 短轮询")]),t._v(" "),e("p",[t._v("短轮询的原理很简单，每隔一段时间客户端就发出一个请求，去获取服务器最新的数据，一定程度上模拟实现了即时通讯。")]),t._v(" "),e("ul",[e("li",[t._v("优点：兼容性强，实现非常简单")]),t._v(" "),e("li",[t._v("缺点：延迟性高，非常消耗请求资源，影响性能")])]),t._v(" "),e("h3",{attrs:{id:"comet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comet","aria-hidden":"true"}},[t._v("#")]),t._v(" comet")]),t._v(" "),e("p",[t._v("comet 有两种主要实现手段，一种是基于 AJAX 的长轮询（long-polling）方式，另一种是基于 Iframe 及 htmlfile 的流（streaming）方式，通常被叫做长连接。")]),t._v(" "),e("blockquote",[e("p",[t._v("具体两种手段的操作方法请移步"),e("a",{attrs:{href:"http://www.52im.net/thread-334-1-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Comet 技术详解：基于 HTTP 长连接的 Web 端实时通信技术"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("长轮询优缺点：")]),t._v(" "),e("ul",[e("li",[t._v("优点：兼容性好，资源浪费较小")]),t._v(" "),e("li",[t._v("缺点：服务器 hold 连接会消耗资源，返回数据顺序无保证，难于管理维护")])]),t._v(" "),e("p",[t._v("长连接优缺点：")]),t._v(" "),e("ul",[e("li",[t._v("优点：兼容性好，消息即时到达，不发无用请求")]),t._v(" "),e("li",[t._v("缺点：服务器维护长连接消耗资源")])]),t._v(" "),e("h3",{attrs:{id:"sse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sse","aria-hidden":"true"}},[t._v("#")]),t._v(" SSE")]),t._v(" "),e("blockquote",[e("p",[t._v("使用指南请看"),e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Server-Sent Events 教程"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("SSE（Server-Sent Event，服务端推送事件）是一种允许服务端向客户端推送新数据的 HTML5 技术。")]),t._v(" "),e("ul",[e("li",[t._v("优点：基于 HTTP 而生，因此不需要太多改造就能使用，使用方便，而 websocket 非常复杂，必须借助成熟的库或框架")]),t._v(" "),e("li",[t._v("缺点：基于文本传输效率没有 websocket 高，不是严格的双向通信，客户端向服务端发送请求无法复用之前的连接，需要重新发出独立的请求")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/65dd4736a045a46db75029c9cc98008c.png",alt:"2019-06-22-12-33-19"}})]),t._v(" "),e("h3",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket","aria-hidden":"true"}},[t._v("#")]),t._v(" Websocket")]),t._v(" "),e("blockquote",[e("p",[t._v("使用指南请看"),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket 教程"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("Websocket 是一个全新的、独立的协议，基于 TCP 协议，与 http 协议兼容、却不会融入 http 协议，仅仅作为 html5 的一部分，其作用就是在服务器和客户端之间建立实时的双向通信。")]),t._v(" "),e("ul",[e("li",[t._v("优点：真正意义上的实时双向通信，性能好，低延迟")]),t._v(" "),e("li",[t._v("缺点：独立与 http 的协议，因此需要额外的项目改造，使用复杂度高，必须引入成熟的库，无法兼容低版本浏览器")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/a719b927611c7acaf7452f3547918f20.png",alt:"2019-06-22-12-33-43"}})]),t._v(" "),e("h3",{attrs:{id:"web-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-worker","aria-hidden":"true"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),e("blockquote",[e("p",[t._v("后面性能优化部分会用到，先做了解")])]),t._v(" "),e("p",[t._v("Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/07/web-worker.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Worker 教程"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"service-workers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-workers","aria-hidden":"true"}},[t._v("#")]),t._v(" Service workers")]),t._v(" "),e("blockquote",[e("p",[t._v("后面性能优化部分会用到，先做了解")])]),t._v(" "),e("p",[t._v("Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理，创建有效的离线体验。")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Service workers 教程"),e("OutboundLink")],1)])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("参考文章:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://segmentfault.com/q/1010000000713509",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么 CSS 选择器解析的时候是从右往左？"),e("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=r.exports}}]);