(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{252:function(e,t,a){"use strict";a.r(t);var r=a(4),f=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"http2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2","aria-hidden":"true"}},[e._v("#")]),e._v(" HTTP2")]),e._v(" "),a("h2",{attrs:{id:"二、http-1-1-的缺陷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、http-1-1-的缺陷","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、HTTP/1.1 的缺陷")]),e._v(" "),a("h3",{attrs:{id:"_1-高延迟-带来页面加载速度的降低"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-高延迟-带来页面加载速度的降低","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.高延迟--带来页面加载速度的降低")]),e._v(" "),a("p",[e._v("虽然近几年来网络带宽增长非常快，然而我们却并没有看到网络延迟有对应程度的降低。"),a("strong",[e._v("网络延迟问题主要由于队头阻塞(Head-Of-Line Blocking),导致带宽无法被充分利用")]),e._v("。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/85617d07f1b6fd63fb42ba3949ba42ff9f22c808/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f392f313664616332616431653963623631373f773d38313426683d32363626663d706e6726733d3633363736",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/85617d07f1b6fd63fb42ba3949ba42ff9f22c808/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f392f313664616332616431653963623631373f773d38313426683d32363626663d706e6726733d3633363736",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("队头阻塞是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。针对队头阻塞,人们尝试过以下办法来解决:")]),e._v(" "),a("ul",[a("li",[e._v("将同一页面的资源分散到不同域名下，提升连接上限。 "),a("strong",[e._v("Chrome 有个机制，对于同一个域名，默认允许同时建立 6 个 TCP 持久连接")]),e._v("，使用持久连接时，虽然能公用一个 TCP 管道，"),a("strong",[e._v("但是在一个管道中同一时刻只能处理一个请求")]),e._v("，在当前的请求没有结束之前，其他的请求只能处于阻塞状态。另外如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。")]),e._v(" "),a("li",[e._v("Spriting 合并多张小图为一张大图,再用 JavaScript 或者 CSS 将小图重新“切割”出来的技术。")]),e._v(" "),a("li",[e._v("内联(Inlining)是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在 CSS 文件里面的 URL 里，减少网络请求次数。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".icon1 {\n    background: url(data:image/png;base64,<data>) no-repeat;\n  }\n.icon2 {\n    background: url(data:image/png;base64,<data>) no-repeat;\n  }\n")])])]),a("ul",[a("li",[e._v("拼接(Concatenation)将多个体积较小的 JavaScript 使用 webpack 等工具打包成 1 个体积更大的 JavaScript 文件,但如果其中 1 个文件的改动就会导致大量数据被重新下载多个文件。")])]),e._v(" "),a("h3",{attrs:{id:"_2-无状态特性-带来的巨大-http-头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-无状态特性-带来的巨大-http-头部","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.无状态特性--带来的巨大 HTTP 头部")]),e._v(" "),a("p",[e._v('由于报文 Header 一般会携带"User Agent""Cookie""Accept""Server"等许多固定的头字段（如下图），多达几百字节甚至上千字节，但 Body 却经常只有几十字节（比如 GET 请求、\n204/301/304 响应），成了不折不扣的“大头儿子”。Header 里携带的内容过大，在一定程度上增加了传输的成本。更要命的是，成千上万的请求响应报文里有很多字段值都是重复的，非常浪费。')]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/a8fcd25b9ad57c78997118c0e56c41b350c879b4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31312f313664623838613230343664653462643f773d3130353826683d33323826663d706e6726733d3537303939",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/a8fcd25b9ad57c78997118c0e56c41b350c879b4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31312f313664623838613230343664653462643f773d3130353826683d33323826663d706e6726733d3537303939",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_3-明文传输-带来的不安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-明文传输-带来的不安全性","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.明文传输--带来的不安全性")]),e._v(" "),a("p",[e._v("HTTP/1.1 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。")]),e._v(" "),a("p",[e._v('你有没有听说过"免费 WiFi 陷阱”之类的新闻呢？\n黑客就是利用了 HTTP 明文传输的缺点，在公共场所架设一个 WiFi 热点开始“钓鱼”，诱骗网民上网。一旦你连上了这个 WiFi 热点，所有的流量都会被截获保存，里面如果有银行卡号、网站密码等敏感信息的话那就危险了，黑客拿到了这些数据就可以冒充你为所欲为。')]),e._v(" "),a("h3",{attrs:{id:"_4-不支持服务器推送消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-不支持服务器推送消息","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.不支持服务器推送消息")]),e._v(" "),a("h2",{attrs:{id:"三、spdy-协议与-http-2-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、spdy-协议与-http-2-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、SPDY 协议与 HTTP/2 简介")]),e._v(" "),a("h3",{attrs:{id:"_1-spdy-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-spdy-协议","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.SPDY 协议")]),e._v(" "),a("p",[e._v("上面我们提到,由于 HTTP/1.x 的缺陷，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到 2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。谷歌推出 SPDY，才算是正式改造 HTTP 协议本身。降低延迟，压缩 header 等等，SPDY 的实践证明了这些优化的效果，也最终带来 HTTP/2 的诞生。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/8db50ef3ce9bb149fb9109d513d02f769d511a86/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f392f313664623132663461376639646238343f773d32373126683d33303826663d706e6726733d3135363533",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/8db50ef3ce9bb149fb9109d513d02f769d511a86/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f392f313664623132663461376639646238343f773d32373126683d33303826663d706e6726733d3135363533",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("HTTP/1.1 有两个主要的缺点：安全不足和性能不高")]),e._v("，由于背负着 HTTP/1.x 庞大的历史包袱,所以协议的修改,兼容性是首要考虑的目标，否则就会破坏互联网上无数现有的资产。如上图所示,\nSPDY 位于 HTTP 之下，TCP 和 SSL 之上，这样可以轻松兼容老版本的 HTTP 协议(将 HTTP1.x 的内容封装成一种新的 frame 格式)，同时可以使用已有的 SSL 功能。")]),e._v(" "),a("p",[e._v("SPDY 协议在 Chrome 浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。")]),e._v(" "),a("h3",{attrs:{id:"_2-http-2-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-2-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.HTTP/2 简介")]),e._v(" "),a("p",[e._v("2015 年，HTTP/2 发布。HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写，HTTP 方法/状态码/语义都与 HTTP/1.x 一样。"),a("strong",[e._v("HTTP/2 基于 SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）")]),e._v("。从目前的情况来看，国内外一些排名靠前的站点基本都实现了 HTTP/2 的部署，使用 HTTP/2 能带来 20%~60%的效率提升。")]),e._v(" "),a("p",[e._v("HTTP/2 由两个规范（Specification）组成：")]),e._v(" "),a("ol",[a("li",[e._v("Hypertext Transfer Protocol version 2 - RFC7540")]),e._v(" "),a("li",[e._v("HPACK - Header Compression for HTTP/2 - RFC7541")])]),e._v(" "),a("h2",{attrs:{id:"四、http-2-新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、http-2-新特性","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、HTTP/2 新特性")]),e._v(" "),a("h3",{attrs:{id:"_1-二进制传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-二进制传输","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.二进制传输")]),e._v(" "),a("p",[a("strong",[e._v("HTTP/2 传输数据量的大幅减少,主要有两个原因:以二进制方式传输和 Header 压缩")]),e._v("。我们先来介绍二进制传输,HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。 "),a("strong",[e._v("HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码")]),e._v("。")]),e._v(" "),a("p",[e._v('它把 TCP 协议的部分特性挪到了应用层，把原来的"Header+Body"的消息"打散"为数个小片的二进制"帧"(Frame),用"HEADERS"帧存放头数据、"DATA"帧存放实体数据。HTP/2 数据分帧后"Header+Body"的报文结构就完全消失了，协议看到的只是一个个的"碎片"。')]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/67f0da962776dc40dde82df12c990ee860fd682e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333462363139343331643937353f773d35373826683d34373126663d706e6726733d3736313633",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/67f0da962776dc40dde82df12c990ee860fd682e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333462363139343331643937353f773d35373826683d34373126663d706e6726733d3736313633",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。"),a("strong",[e._v("多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_2-header-压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-header-压缩","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.Header 压缩")]),e._v(" "),a("p",[e._v('HTTP/2 并没有使用传统的压缩算法，而是开发了专门的"HPACK”算法，在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90%的高压缩率。')]),e._v(" "),a("p",[e._v("具体来说:")]),e._v(" "),a("ul",[a("li",[e._v("在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送；")]),e._v(" "),a("li",[e._v("首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;")]),e._v(" "),a("li",[e._v("每个新的首部键-值对要么被追加到当前表的末尾，要么替换表中之前的值")])]),e._v(" "),a("p",[e._v("例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销\n"),a("a",{attrs:{href:"https://camo.githubusercontent.com/ed3cb4e9f4d394e5219f6ea50e42ccb588305340/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333461386463326364653732303f773d35303626683d34323326663d706e6726733d313035323636",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/ed3cb4e9f4d394e5219f6ea50e42ccb588305340/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333461386463326364653732303f773d35303626683d34323326663d706e6726733d313035323636",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_3-多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-多路复用","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.多路复用")]),e._v(" "),a("p",[e._v("在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。")]),e._v(" "),a("p",[e._v("大家可以通过 "),a("a",{attrs:{href:"https://http2.akamai.com/demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("该链接"),a("OutboundLink")],1),e._v(" 直观感受下 HTTP/2 比 HTTP/1 到底快了多少。\n"),a("a",{attrs:{href:"https://camo.githubusercontent.com/5b1c419a000e1c91e21e89e98ca45c2932f218b7/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f31342f313638656339303834366635363666623f773d36383026683d34303026663d67696626733d353135383036",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/5b1c419a000e1c91e21e89e98ca45c2932f218b7/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f31342f313638656339303834366635363666623f773d36383026683d34303026663d67696626733d353135383036",alt:"img"}}),a("OutboundLink")],1),e._v("\n在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2 中,")]),e._v(" "),a("ul",[a("li",[e._v("同域名下所有通信都在单个连接上完成。")]),e._v(" "),a("li",[e._v("单个连接可以承载任意数量的双向数据流。")]),e._v(" "),a("li",[e._v("数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。")])]),e._v(" "),a("p",[e._v("这一特性，使性能有了极大提升：")]),e._v(" "),a("ul",[a("li",[e._v("同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,这样整个页面资源的下载过程只需要一次慢启动，同时也避免了多个 TCP 连接竞争带宽所带来的问题。")]),e._v(" "),a("li",[e._v("并行交错地发送多个请求/响应，请求/响应之间互不影响。")]),e._v(" "),a("li",[e._v("在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/f890478d84809b5ba4744818ab707723ca730ad0/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32372f313639326661323965343133343866373f773d37343526683d33353826663d706e6726733d3834373230",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/f890478d84809b5ba4744818ab707723ca730ad0/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32372f313639326661323965343133343866373f773d37343526683d33353826663d706e6726733d3834373230",alt:"img"}}),a("OutboundLink")],1),e._v("\n如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。")]),e._v(" "),a("h3",{attrs:{id:"_4-server-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-server-push","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.Server Push")]),e._v(" "),a("p",[e._v('HTTP2 还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。比如，在浏览器刚请求 HTML 的时候就提前把可能会用到的 JS、CSS 文件发给客户端，减少等待的延迟，这被称为"服务器推送"（ Server Push，也叫 Cache push）')]),e._v(" "),a("p",[e._v("例如下图所示,服务端主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/373e1e103c413b318f7aca54a02a648883170e3c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333461386464306164373438353f773d36383326683d32363526663d706e6726733d3831343839",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/373e1e103c413b318f7aca54a02a648883170e3c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f322f32382f313639333461386464306164373438353f773d36383326683d32363526663d706e6726733d3831343839",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。")]),e._v(" "),a("h3",{attrs:{id:"_5-提高安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-提高安全性","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.提高安全性")]),e._v(" "),a("p",[e._v("出于兼容的考虑，HTTP/2 延续了 HTTP/1 的“明文”特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。")]),e._v(" "),a("p",[e._v("但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，"),a("strong",[e._v("所以“事实上”的 HTTP/2 是加密的")]),e._v('。也就是说，互联网上通常所能见到的 HTTP/2 都是使用"https”协议名，跑在 TLS 上面。HTTP/2 协议定义了两个字符串标识符：“h2"表示加密的 HTTP/2，“h2c”表示明文的 HTTP/2。')]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/caecfdfd3e73b4561a027ac963874acf8ea4817c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664636436356230376237363262393f773d35383326683d32383326663d706e6726733d3539353131",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/caecfdfd3e73b4561a027ac963874acf8ea4817c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664636436356230376237363262393f773d35383326683d32383326663d706e6726733d3539353131",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"六、http-3-新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、http-3-新特性","aria-hidden":"true"}},[e._v("#")]),e._v(" 六、HTTP/3 新特性")]),e._v(" "),a("h3",{attrs:{id:"_1-http-2-的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-2-的缺点","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.HTTP/2 的缺点")]),e._v(" "),a("p",[e._v("虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，"),a("strong",[e._v("主要是底层支撑的 TCP 协议造成的")]),e._v("。HTTP/2 的缺点主要有以下几点：")]),e._v(" "),a("ul",[a("li",[e._v("TCP 以及 TCP+TLS 建立连接的延时")])]),e._v(" "),a("p",[e._v("HTTP/2 都是使用 TCP 协议来传输的，而如果使用 HTTPS 的话，还需要使用 TLS 协议进行安全传输，而使用 TLS 也需要一个握手过程，"),a("strong",[e._v("这样就需要有两个握手延迟过程")]),e._v("：")]),e._v(" "),a("p",[e._v("① 在建立 TCP 连接的时候，需要和服务器进行三次握手来确认连接成功，也就是说需要在消耗完 1.5 个 RTT 之后才能进行数据传输。")]),e._v(" "),a("p",[e._v("② 进行 TLS 连接，TLS 有两个版本——TLS1.2 和 TLS1.3，每个版本建立连接所花的时间不同，大致是需要 1~2 个 RTT。")]),e._v(" "),a("p",[e._v("总之，在传输数据之前，我们需要花掉 3 ～ 4 个 RTT。")]),e._v(" "),a("ul",[a("li",[e._v("TCP 的队头阻塞并没有彻底解决")])]),e._v(" "),a("p",[e._v("上文我们提到在 HTTP/2 中，多个请求是跑在一个 TCP 管道中的。但当出现了丢包时，HTTP/2 的表现反倒不如 HTTP/1 了。因为 TCP 为了保证可靠传输，有个特别的“丢包重传”机制，丢失的包必须要等待重新传输确认，HTTP/2 出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该 TCP 连接中的所有请求（如下图）。而对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/3c5b10c3f4a4ffd0eed0f7e680dd96ce94f1559c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664643031636536646332333135643f773d36353926683d32313926663d706e6726733d3530323332",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/3c5b10c3f4a4ffd0eed0f7e680dd96ce94f1559c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664643031636536646332333135643f773d36353926683d32313926663d706e6726733d3530323332",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("读到这里，可能就会有人考虑为什么不直接去修改 TCP 协议？其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。")]),e._v(" "),a("h3",{attrs:{id:"_2-http-3-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-3-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.HTTP/3 简介")]),e._v(" "),a("p",[e._v("Google 在推 SPDY 的时候就已经意识到了这些问题，于是就另起炉灶搞了一个基于 UDP 协议的“QUIC”协议，让 HTTP 跑在 QUIC 上而不是 TCP 上。\n而这个“HTTP over QUIC”就是 HTTP 协议的下一个大版本，HTTP/3。它在 HTTP/2 的基础上又实现了质的飞跃，真正“完美”地解决了“队头阻塞”问题。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/f7fc852e1f725b00372c761e8537f20f51a36c8f/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664636437326136353664393034643f773d35373926683d32343526663d706e6726733d3634313932",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/f7fc852e1f725b00372c761e8537f20f51a36c8f/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664636437326136353664393034643f773d35373926683d32343526663d706e6726733d3634313932",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。不过 HTTP/3 目前还处于草案阶段，正式发布前可能会有变动，所以本文尽量不涉及那些不稳定的细节。")]),e._v(" "),a("h3",{attrs:{id:"_3-quic-新功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-quic-新功能","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.QUIC 新功能")]),e._v(" "),a("p",[e._v('上面我们提到 QUIC 基于 UDP，而 UDP 是“无连接”的，根本就不需要“握手”和“挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的“流”和“多路复用”，单个“流"是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。具体来说 QUIC 协议有以下特点：')]),e._v(" "),a("ul",[a("li",[e._v("实现了类似 TCP 的流量控制、传输可靠性的功能。")])]),e._v(" "),a("p",[e._v("虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。")]),e._v(" "),a("ul",[a("li",[e._v("实现了快速握手功能。")])]),e._v(" "),a("p",[e._v("由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。"),a("strong",[e._v("0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势")]),e._v("。")]),e._v(" "),a("ul",[a("li",[e._v("集成了 TLS 加密功能。")])]),e._v(" "),a("p",[e._v("目前 QUIC 使用的是 TLS1.3，相较于早期版本 TLS1.3 有更多的优点，其中最重要的一点是减少了握手所花费的 RTT 个数。")]),e._v(" "),a("ul",[a("li",[e._v("多路复用，彻底解决 TCP 中队头阻塞的问题")])]),e._v(" "),a("p",[e._v("和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流（如下图）。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://camo.githubusercontent.com/16228451ab5064606af0463b38b52b5bc43c89a6/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664643031653435396463633131623f773d36383526683d31383326663d706e6726733d3531313937",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://camo.githubusercontent.com/16228451ab5064606af0463b38b52b5bc43c89a6/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f31302f31352f313664643031653435396463633131623f773d36383526683d31383326663d706e6726733d3531313937",alt:"img"}}),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"七、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 七、总结")]),e._v(" "),a("ul",[a("li",[e._v("HTTP/1.1 有两个主要的缺点：安全不足和性能不高。")]),e._v(" "),a("li",[e._v('HTTP/2 完全兼容 HTTP/1，是“更安全的 HTTP、更快的 HTTPS"，头部压缩、多路复用等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；')]),e._v(" "),a("li",[e._v("QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议")])])])},[],!1,null,null,null);t.default=f.exports}}]);